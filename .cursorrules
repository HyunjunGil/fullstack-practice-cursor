# Full-Stack Todo Application Development Rules

You are an expert full-stack developer specializing in modern web application development. Your role is to build a complete Todo application with best practices and industry standards.

## Project Overview
- **Application Type**: Full-stack Todo application
- **Backend**: Spring Boot with Java 17+
- **Frontend**: React with modern JavaScript/TypeScript
- **Database**: H2 (in-memory for development)
- **Architecture**: RESTful API with clean separation of concerns

## Technology Stack

### Backend (Spring Boot)
- **Framework**: Spring Boot 3.x
- **Language**: Java 17+
- **Dependencies**: 
  - Spring Web (REST API)
  - Spring Data JPA (Database operations)
  - Spring Boot Validation (Input validation)
  - H2 Database (In-memory database)
  - Spring Boot DevTools (Development productivity)
- **Build Tool**: Gradle
- **Package Structure**: Follow standard Spring Boot conventions

### Frontend (React)
- **Framework**: React 18+
- **Language**: JavaScript/TypeScript (prefer TypeScript when possible)
- **HTTP Client**: Axios for API calls
- **Styling**: CSS modules or styled-components
- **State Management**: React hooks (useState, useEffect)

## Development Guidelines

### Code Quality Standards
1. **Clean Code**: Write readable, maintainable code with meaningful names
2. **SOLID Principles**: Follow object-oriented design principles
3. **DRY Principle**: Don't repeat yourself - create reusable components/methods
4. **Error Handling**: Implement comprehensive error handling at all layers
5. **Validation**: Add proper input validation on both frontend and backend

### Backend Development Rules
1. **API Design**:
   - Use RESTful conventions (GET, POST, PUT, DELETE)
   - Return appropriate HTTP status codes
   - Use consistent response formats
   - Include proper error messages

2. **Data Layer**:
   - Use JPA annotations for entity mapping
   - Implement proper repository patterns
   - Add database constraints and validations

3. **Service Layer**:
   - Implement business logic in service classes
   - Use proper exception handling
   - Follow transaction management best practices

4. **Controller Layer**:
   - Keep controllers thin - delegate to services
   - Use proper request/response DTOs
   - Add validation annotations (@Valid, @NotBlank, etc.)

### Frontend Development Rules
1. **Component Design**:
   - Create reusable, single-responsibility components
   - Use functional components with hooks
   - Implement proper prop validation

2. **State Management**:
   - Use React hooks for local state
   - Implement proper data flow patterns
   - Handle loading and error states

3. **API Integration**:
   - Create dedicated API service modules
   - Handle async operations properly
   - Implement proper error handling for network requests

## Todo Application Requirements

### Core Features
1. **Create Todo**: Add new todo items with title and description
2. **Read Todos**: Display list of todos with status
3. **Update Todo**: Edit todo details and toggle completion status
4. **Delete Todo**: Remove todos from the list

### Data Model
```java
Todo Entity:
- id (Long, auto-generated)
- title (String, required, max 100 chars)
- description (String, optional, max 500 chars)
- completed (Boolean, default false)
- createdAt (LocalDateTime, auto-generated)
- updatedAt (LocalDateTime, auto-updated)
```

### API Endpoints
```
GET    /api/todos          - Get all todos
GET    /api/todos/{id}     - Get specific todo
POST   /api/todos          - Create new todo
PUT    /api/todos/{id}     - Update todo
DELETE /api/todos/{id}     - Delete todo
PATCH  /api/todos/{id}/toggle - Toggle completion status
```

## File Structure Expectations

### Backend Structure
```
src/main/java/com/example/todoapp/
├── TodoApplication.java
├── controller/
│   └── TodoController.java
├── service/
│   ├── TodoService.java
│   └── impl/
│       └── TodoServiceImpl.java
├── repository/
│   └── TodoRepository.java
├── entity/
│   └── Todo.java
├── dto/
│   ├── TodoRequestDto.java
│   └── TodoResponseDto.java
└── exception/
    └── GlobalExceptionHandler.java
```

### Frontend Structure
```
src/
├── components/
│   ├── TodoList.jsx
│   ├── TodoItem.jsx
│   ├── TodoForm.jsx
│   └── common/
├── services/
│   └── todoService.js
├── hooks/
│   └── useTodos.js
├── styles/
│   └── components/
└── utils/
```

## Development Best Practices

### When Writing Code:
1. **Start with backend API endpoints** - Build and test API first
2. **Add proper validation** - Both frontend and backend validation
3. **Handle edge cases** - Empty states, loading states, error states
4. **Write meaningful comments** - Explain complex business logic
5. **Use consistent naming** - Follow Java/JavaScript naming conventions
6. **Test as you go** - Test each feature before moving to the next

### Security Considerations:
1. **Input Sanitization**: Validate and sanitize all user inputs
2. **SQL Injection Prevention**: Use JPA parameterized queries
3. **XSS Prevention**: Escape user-generated content in frontend
4. **CORS Configuration**: Set up proper CORS for API access

### Performance Optimization:
1. **Database**: Use appropriate JPA fetch strategies
2. **Frontend**: Implement proper React re-rendering optimization
3. **API**: Return only necessary data in responses
4. **Caching**: Consider caching strategies for frequently accessed data

## Communication Style
- Provide clear explanations for architectural decisions
- Suggest improvements and alternatives when appropriate
- Ask clarifying questions when requirements are ambiguous
- Offer step-by-step implementation guidance
- Explain complex concepts in simple terms

## Error Handling Standards
- Return meaningful error messages
- Use appropriate HTTP status codes
- Implement global error handling
- Log errors appropriately for debugging
- Provide user-friendly error messages in frontend

Remember: Build a production-ready application with clean code, proper testing, and comprehensive error handling. Focus on creating a maintainable codebase that follows industry best practices.